
#    Copyright 2007-2012 Pawel Goralski
#    e-mail: pawel.goralski@nokturnal.pl
#    This file is part of AMIDILIB.
#    See license.txt for licensing information.

import sys
import os

env = Environment(tools=['default'])

Help("\nType: 'scons target=name' where name can be: \n 'f030' - for Atari Falcon030 build\n 'atarist' - for Atari ST build \n 'ataritt' - for Atari TT build \n 'ct60' - for Atari Falcon CT60/63\n 'unix' - for platform independent version (dummy)\n")

debug = ARGUMENTS.get('debug', 0)
portable = ARGUMENTS.get('portable', 0)

#todo add target options
target = ARGUMENTS.get('target', 0)

#to indicate that we are cross compiling
CROSS=1
CROSS_PREFIX='m68k-atari-mint-'

ST_CFLAGS=''
ST_LDFLAGS=''
ST_VASM_FLAGS =''
ST_CCFLAGS =''
EXE_EXT_1=''
EXE_EXT_2=''

if (target == "unix"):
    print "Building Unix target!"
    portable=1;
    ST_CFLAGS='-std=c99 -fomit-frame-pointer'
    ST_LDFLAGS='-Wl,--traditional-format -fomit-frame-pointer -lm'
    ST_VASM_FLAGS = ''
    ST_CCFLAGS =''
elif (target == "f030"):
    print "Building Atari Falcon 030 target!"
    portable=0;
    ST_CFLAGS='-std=c99 -fomit-frame-pointer -m68030'
    ST_LDFLAGS='-m68000 -Wl,--traditional-format -fomit-frame-pointer -lm'
    ST_VASM_FLAGS = '-Faout -quiet -m68030 -spaces -showopt -no-opt'
    ST_CCFLAGS =''
    EXE_EXT_1='.tos'
    EXE_EXT_2='.ttp'
elif (target == "atarist"):
    print "Building Atari ST target!"
    portable=0;  
    ST_CFLAGS='-std=c99 -fomit-frame-pointer -m68000'
    ST_LDFLAGS='-m68000 -Wl,--traditional-format -fomit-frame-pointer -lm'
    ST_VASM_FLAGS = '-Faout -quiet -m68000 -spaces -showopt -no-opt'
    ST_CCFLAGS =''
    EXE_EXT_1='.tos'
    EXE_EXT_2='.ttp'
elif (target == "ataritt"):
    print "Building Atari TT target!"
    portable=0;
    ST_CFLAGS='-std=c99 -fomit-frame-pointer -m68030'
    ST_LDFLAGS='-m68000 -Wl,--traditional-format -fomit-frame-pointer -lm'
    ST_VASM_FLAGS = '-Faout -quiet -m68000 -spaces -showopt -no-opt'
    ST_CCFLAGS =''
    EXE_EXT_1='.tos'
    EXE_EXT_2='.ttp'
elif (target == "ct60"):
    print "Building Falcon CT60/63 target!"
    portable=0;
    ST_CFLAGS='-std=c99 -fomit-frame-pointer -m68060'
    ST_LDFLAGS='-m68000 -Wl,--traditional-format -fomit-frame-pointer -lm'
    ST_VASM_FLAGS = '-Faout -quiet -m68060 -spaces -showopt -no-opt'
    ST_CCFLAGS =''
    EXE_EXT_1='.tos'
    EXE_EXT_2='.ttp'
else:
    print "Building unknown target!" 
    portable=1;
    ST_CFLAGS='-std=c99 -fomit-frame-pointer'
    ST_LDFLAGS='-Wl,--traditional-format -fomit-frame-pointer -lm'
    ST_VASM_FLAGS = ''
    ST_CCFLAGS =''
    EXE_EXT_1=''
    EXE_EXT_2=''

#output executable name
OUTPUT_DIR='../bin/'
AMIDI_TEST_EXE='amidi' + EXE_EXT_2
YM2149_TEST_EXE='ym2149' + EXE_EXT_1
MIDI_SEQ_TEST_EXE='midiseq' + EXE_EXT_1
TIMINGS_TEST_EXE='timings' + EXE_EXT_1

if (CROSS==1):
  env["CC"] = CROSS_PREFIX + 'gcc'
  env["CXX"] = CROSS_PREFIX + 'g++'
  env["AS"] = 'vasmm68k_mot'
  env['AR'] = CROSS_PREFIX + 'ar'
  env['OBJCOPY'] = CROSS_PREFIX + 'objcopy'
  env['STRIP'] = CROSS_PREFIX + 'strip -s'
  env['STACK'] = CROSS_PREFIX + 'stack'
else:
  env["CC"] = 'gcc'
  env["CXX"] = 'g++'
  env["AS"] = 'vasmm68k_mot'
  env['AR'] = 'ar'
  env['OBJCOPY'] = 'objcopy'
  env['STRIP'] = 'strip -s'
  env['STACK'] = 'stack'
  
env["CPPPATH"] = ["/usr/m68k-atari-mint/include", "../","../include","../include/lzo","../include/ym2149","../include/input"]
env["LIBPATH"] = '/usr/m68k-atari-mint/lib'

# VASM settings
env['VASM'] = 'vasmm68k_mot'

#############################################################################################################################
# additional defines  
#############################################################################################################################
# DEBUG_BUILD - enables debug build
# DEBUG_FILE_OUTPUT enables log output to files (works only if DEBUG_BUILD is defined)  
# DEBUG_CONSOLE_OUTPUT enables log output to console (works only if DEBUG_BUILD is defined)  
# DEBUG_MEM logs memory function calling (works only if DEBUG_BUILD && (DEBUG_FILE_OUTPUT||DEBUG_CONSOLE_OUTPUT) is enabled)
# FORCE_MALLOC forces use of libc malloc() for memory allocation, not native functions
# TIME_CHECK_PORTABLE if set time measuring is based on stdlib functions
# PORTABLE build portable,platform independent version 
# MIDI_PARSER_DEBUG output midi parsing (works only if DEBUG_BUILD && (DEBUG_FILE_OUTPUT||DEBUG_CONSOLE_OUTPUT) is enabled)
# STRUCT_PACK enables structure packing if defined (for now only gcc compatible) 
# MIDI_PARSER_TEST outputs loaded and parsed midi file in human readable form
# IKBD_MIDI_SEND_DIRECT all Midiws() calls will be replaced with low level function that writes to hardware.

# -DDEBUG_BUILD -DDEBUG_MEM -DDEBUG_FILE_OUTPUT -DMIDI_PARSER_DEBUG -DMIDI_PARSER_TEST
# -DDEBUG_BUILD -DDEBUG_FILE_OUTPUT -DDEBUG_CONSOLE_OUTPUT 

env["CDEFINES"] = 'TOS'
env["CXXDEFINES"] = 'TOSCPP'

if int(debug):
  ST_CFLAGS='-g '+ ST_CFLAGS + ' -DDEBUG_BUILD -DDEBUG_FILE_OUTPUT -DDEBUG_CONSOLE_OUTPUT';

if int(portable):
  ST_CFLAGS=ST_CFLAGS +' -DPORTABLE -DTIME_CHECK_PORTABLE'
else:
  ST_CFLAGS=ST_CFLAGS +' -DFORCE_MALLOC'

env["CFLAGS"] = ST_CFLAGS  
env["LINKFLAGS"] = ST_LDFLAGS 
env["ASFLAGS"] = ST_VASM_FLAGS
env['VASM_FLAGS'] = ST_VASM_FLAGS

lzo_src = ["minilzo.c"]
input_src = ["ikbd.s"]
ym2149_src = ["ym2149.c"]
mfp_src = ["mfp.c"]

amidi_test_src = ["../demo/midi_rep/main.c"]
timings_test_src = ["../demo/timings/timTest.c"]
ym2149_test_src = ["../demo/ymOutput/ymTest.c"]
midiOut_test_src = ["../demo/midi_output/midiTest.c"]

if int(portable):
  amidilib_src = ["twisterm.c","mt32.c","midiseq.c","list.c","iff.c","fmio.c","cm_500.c","cm_32l.c","c_vars.c","amidilib.c","tbl_stat.c" ,"memory.c" ,"amlog.c","midi_rep.c","mfp.c"] + ym2149_src+lzo_src 
else:
  amidilib_src = ["twisterm.c","mt32.c","midiseq.c","list.c","iff.c","fmio.c","cm_500.c","cm_32l.c","c_vars.c","amidilib.c","tbl_stat.c" ,"memory.c" ,"amlog.c","midi_rep.c","amidi.s","testReplay.s"] + mfp_src + ym2149_src + lzo_src + input_src

# main library components

env.Program(target = AMIDI_TEST_EXE, source = amidi_test_src + amidilib_src)
env.Program(target = YM2149_TEST_EXE, source = ym2149_test_src + amidilib_src)
env.Program(target = MIDI_SEQ_TEST_EXE, source = midiOut_test_src + amidilib_src)
env.Program(target = TIMINGS_TEST_EXE, source = timings_test_src + amidilib_src)

