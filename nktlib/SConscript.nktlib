#    Copyright 2007-2022 Pawel Goralski
#    
#    This file is part of AMIDILIB / BadMood.
#    See license.txt for licensing information.

import sys
import os

env = Environment(ENV = os.environ,tools=['default'])

Help("AMIDILIB Copyright 2007-2022 Pawel Goralski\n \
Type: 'Set build variables in SConstruct'\n \
where name of 'targetPlatform' can be: \n \
        'F030' - for Atari Falcon030 / TT build\n \
        'ST' - for Atari ST build \n \
        'CT60' - for Atari Falcon CT60/63\n \
 'use_crosscompiler' - enables m68k cross compiler, set to 'y' by default\n \
 'toolchain' - toolchain type 'GCC' or 'GCCBROWNELF'\n,\
 'toolchain_version' - compiler version string (x.x.x, eg. '4.3.4' or '7.3.1')\n,\
 'host' - host machine,\n \
 'build_config' - build type ('debug', 'release'),\n \
 'use_fpu' - enable/disable hardware fpu code generation (valid only on F030 builds),\n \
 'enable_lzo_compression' - enable/disable lzo compression support.\n \
 'enable_lto' - eneable link time optimisation. Only valid on gcc 7.xx brownelf.\n \
 'ikbd_direct_write' - bypass O/S when writing to MIDI ports\n \
 'tx_enable' - skips writing to ACIA ikbd port, sending bytes is via ikbd tx interrupt,\n \
 'conout_enable' - disable / enable console output,\n \
 'gemdos_io_enable' - uses gemdos i/o instead of standard libc file i/o,\n \
 'use_libc' - - if set to 'no', builds library without libc dependencies, reducing binary size,\n \
 'debug_level' - sets debug level, only valid in debug builds. Level can be set to (0..2)\n")

Import(
        'targetPlatform',\
        'use_crosscompiler',\
        'toolchain',\
        'toolchain_version',\
        'host',\
        'build_config',\
        'use_fpu',\
        'enable_lzo_compression',\
        'enable_lto',\
        'ikbd_direct_write',\
        'tx_enable',\
        'conout_enable',\
        'gemdos_io_enable',\
        'use_libc',\
        'debug_level'
        )

compilerName=''
LIBRARYNAME = 'nkt'
PREFIX=''

# move scons database to build folder
SConsignFile(os.path.join("./nktlib/", '.sconsign.dblite')) 

num_cpu = int(os.environ.get('NUMBER_OF_PROCESSORS', 2))
SetOption('num_jobs', num_cpu)
print ("running with ", GetOption('num_jobs'), "jobs.") 

if(toolchain=='GCC'):
# Cygwin path
        PREFIX = '/opt/cross-mint'
# Linux cross compiler
# PREFIX = /usr
        compilerName = 'm68k-atari-mint-'
        env['CPPPATH'] = [PREFIX + 'm68k-atari-mint/include']
        env['LIBPATH'] = [PREFIX + 'm68k-atari-mint/lib']
elif(toolchain=='GCCBROWNELF'):
# Linux/Cygwin cross compiler
# Cygwin path
    PREFIX = '/opt/cross-mint'
#Linux
#  PREFIX = '/usr'
    compilerName = 'm68k-ataribrown-elf-'
    env['CPPPATH'] = [PREFIX + '/m68k-ataribrown-elf/include']
    env['LIBPATH'] = [PREFIX + '/m68k-ataribrown-elf/lib']
else:
    print('ERROR: Undefined target toolset. Exiting...')
    exit(-1)

env['CC'] = PREFIX + '/bin/' + compilerName + 'gcc'
env['CXX'] = PREFIX + '/bin/' + compilerName + 'g++'
env['OBJCOPY'] = PREFIX + '/bin/' + compilerName + 'objcopy'
env['STRIP'] = PREFIX + '/bin/' + compilerName + 'strip -s'
env['STACK'] = PREFIX + '/bin/' + compilerName + 'stack'
env['AR'] = PREFIX + '/bin/' + compilerName + 'ar'
env['RANLIB'] = PREFIX + '/bin/' + compilerName + 'ranlib'

if(toolchain == 'GCCBROWNELF'):
    env['PROGSUFFIX'] = '.elf'
else:
    env['PROGSUFFIX'] = '.tos'

env['LIBSUFFIX'] ='.a'

# VASM
env['AS']='vasmm68k_mot'
env['VASM'] = env['AS']

# ST/e, F030, CT60 program flags
CFLAGS=''
LDFLAGS=''
VASM_FLAGS=''
CPPFLAGS=''
CXXFLAGS=''
CODEGEN = '-std=c99'

LIB_POSTFIX='not_set'
LIB_TARGET='not_set'

STACK_SIZE=0

TARGET='-DTARGET_'
CSTARTUP_FOLDER=''

if(toolchain=='GCC'):
    fpu_flags = ''

    if(use_fpu == 'yes'):
        fpu_flags='-m68881 '
    else:
        fpu_flags='-msoft-float '

    if(targetPlatform == 'ST'):
        CFLAGS += '-m68000 ' + CODEGEN + ' -ffast-math -fomit-frame-pointer ' + fpu_flags
        LDFLAGS += '-m68000 -Wl,--traditional-format '
        VASM_FLAGS += '-m68000 -quiet -Faout -quiet -spaces -I./nktlib/include '
        CSTARTUP_FOLDER='../deps/startup/aout/m68000/'

        LIB_TARGET = '000'
    elif(targetPlatform == 'F030'):
        CFLAGS += '-m68030 ' + CODEGEN + ' -ffast-math -fomit-frame-pointer ' + fpu_flags
        LDFLAGS += '-m68030 -Wl,--traditional-format '
        VASM_FLAGS += '-m68030 -quiet -Faout -quiet -spaces -I./nktlib/include '
        CSTARTUP_FOLDER='../deps/startup/aout/m68030/'

        LIB_TARGET = '030'
    elif(targetPlatform == 'CT60'):
        CFLAGS += '-m68060 ' + CODEGEN + ' -ffast-math -fomit-frame-pointer ' + fpu_flags
        LDFLAGS += '-m68060 -Wl,--traditional-format '
        VASM_FLAGS += '-m68060 -quiet -Faout -quiet -spaces -I./nktlib/include '
        CSTARTUP_FOLDER='../deps/startup/aout/m68060/'

        LIB_TARGET = '060'
    else:
        print('Unsupported target. Exiting...')
        exit(-1)
elif(toolchain == 'GCCBROWNELF'):
    fpu_flags = ''

    if(use_fpu == 'yes'):
        fpu_flags='-m68881 '
    else:
        fpu_flags='-msoft-float '

    if(targetPlatform == 'ST'):
        CFLAGS += '-m68000 ' + CODEGEN + ' -fomit-frame-pointer  -fstrict-aliasing -fcaller-saves -fleading-underscore -ffunction-sections -fdata-sections ' + fpu_flags
        LDFLAGS += '-m68000 -Wl,--gc-sections -Wl,--emit-relocs -Ttext=0 '
        VASM_FLAGS += '-m68000 -quiet -Felf -quiet -spaces -I./nktlib/include '
        CSTARTUP_FOLDER='../deps/startup/brownelf/m68000/'
        LIB_TARGET = '000'
        # floating point support
        env['LIBPATH'] = env['LIBPATH'] + ['/lib/gcc/m68k-ataribrown-elf/'+ toolchain_version + '/m68000','/usr/m68k-ataribrown-elf/lib/m68000']
    elif(targetPlatform == 'F030'):
        CFLAGS += '-m68030 ' + CODEGEN + ' -fomit-frame-pointer -fstrict-aliasing -fcaller-saves -fleading-underscore -ffunction-sections -fdata-sections ' + fpu_flags
        LDFLAGS += '-m68030 -Wl,--gc-sections -Wl,--emit-relocs -Ttext=0 '
        VASM_FLAGS += '-m68030 -quiet -Felf -quiet -spaces -I./nktlib/include '
        CSTARTUP_FOLDER='../deps/startup/brownelf/m68030/'
        LIB_TARGET = '030'
        # floating point support

        if(use_fpu == 'yes'):
        # hardware fpu support
            env['LIBPATH'] = env['LIBPATH'] + ['/lib/gcc/m68k-ataribrown-elf/'+ toolchain_version + '/m68020', '/usr/m68k-ataribrown-elf/lib/m68020']
        else:
        # soft float
            env['LIBPATH'] = env['LIBPATH'] + ['/lib/gcc/m68k-ataribrown-elf/'+ toolchain_version + '/m68020/softfp', '/usr/m68k-ataribrown-elf/lib/m68020/softfp']
    elif(targetPlatform == 'CT60'):
        CFLAGS += '-m68060 ' + CODEGEN + ' -fomit-frame-pointer  -fstrict-aliasing -fcaller-saves -fleading-underscore -ffunction-sections -fdata-sections ' + fpu_flags
        LDFLAGS += '-m68060 -Wl,--gc-sections -Wl,--emit-relocs -Ttext=0 '
        VASM_FLAGS += '-m68060 -quiet -Felf -quiet -spaces -I./nktlib/include '
        CSTARTUP_FOLDER='../deps/startup/brownelf/m68060/'

        LIB_TARGET = '060'
        # floating point support
        # hardware fpu support
        env['LIBPATH'] = env['LIBPATH'] + ['/lib/gcc/m68k-ataribrown-elf/'+ toolchain_version + '/m68060', '/usr/m68k-ataribrown-elf/lib/m68060']
    else:
        print('Unsupported target. Exiting...')
        exit(-1)
else:
    print('ERROR: Undefined target toolset. Exiting...')
    exit(-1)

TARGET = TARGET + targetPlatform

# indicate that we are not linking to standard libc libraries
if(use_libc == "no"):
    LDFLAGS+='-nostdlib -nostartfiles -Wl,-e__start '
else:
        LDFLAGS+='-Wl,-e__start '

# skip writing directly to ikbd port completely
if (tx_enable == "yes"):
    VASM_FLAGS += '-DTX_ENABLE=1 '
else:
    VASM_FLAGS += '-DTX_ENABLE=0 '

if (conout_enable == "no"):
    print ("Silent mode. Console output disabled.")
    CFLAGS += '-DSUPRESS_CON_OUTPUT '

if (gemdos_io_enable == "yes"):
    print ("Use GEMDOS for file I/O not libc functions.")
    CFLAGS += '-DENABLE_GEMDOS_IO '

if(enable_lto == 'yes'):
    CFLAGS += '-flto '
    LDFLAGS += '-flto '
    
env["CPPPATH"] =env["CPPPATH"] + ["../","./include","./include/lzo"]
env["LIBPATH"] = env["LIBPATH"] + ['../bin/']

if ( build_config == 'debug'):
  print ("Debug build...")
  if(debug_level=='1'):
    CFLAGS += '-DDEBUG_BUILD -DEVENT_LINEAR_BUFFER ' + '-DUSE_INLINE '  + '-DDEBUG_SERIAL_OUTPUT ' + '-DLOAD_TEST '
  elif(debug_level=='2'):
    CFLAGS += '-DDEBUG_BUILD -DMIDI_PARSER_DEBUG -DMIDI_PARSER_TEST -DEVENT_LINEAR_BUFFER '
  elif(debug_level=='3'):
    CFLAGS += '-DDEBUG_BUILD -DEVENT_LINEAR_BUFFER '
  else:
        CFLAGS += '-DDEBUG_BUILD -DEVENT_LINEAR_BUFFER ' + '-DUSE_INLINE '  + '-DDEBUG_SERIAL_OUTPUT ' + '-DLOAD_TEST '

  LIB_POSTFIX = LIB_TARGET+'d'
else:
        print ("Release build... Code optimisation is turned on.")
        CFLAGS += '-DEVENT_LINEAR_BUFFER ' +'-O3 ' + '-DUSE_INLINE '
        LIB_POSTFIX = LIB_TARGET

if(ikbd_direct_write == "yes"):
    print ("Sending data directly via IKBD ENABLED")
    CFLAGS += CFLAGS +'-DIKBD_MIDI_SEND_DIRECT '
    VASM_FLAGS += '-DIKBD_MIDI_SEND_DIRECT=1 '
elif(ikbd_direct_write=='no'):
    print ("Sending data directly via IKBD DISABLED")
    CFLAGS += ' '
    VASM_FLAGS += '-DIKBD_MIDI_SEND_DIRECT=0 '

env["CFLAGS"] = CFLAGS
env["LINKFLAGS"] = LDFLAGS
env["ASFLAGS"] = VASM_FLAGS
env['VASM_FLAGS'] = VASM_FLAGS

if(toolchain == 'GCCBROWNELF'):
    lib_dir='./lib/elf/'
else:
    lib_dir='./lib/aout/'
    
# gemdos i/o
gemdos_src=""

if(gemdos_io_enable=='yes'):
    gemdos_src = ["./src/fmio.c"]

nkt_replay_src = ["./src/nkt_rep.c","./src/nkt_rep_m68k.s","./src/rol_ptch.c","./src/common.s","./src/memory.c","./src/linalloc.c"]
nkt_conv_src = ["./src/midi2nkt.c","./src/mus2midi.c","./src/c_vars.c","./src/amlog.c","./src/miditim.c","./src/midiInfo.c"]

lzo_src = ["./src/minilzo.c"]

# build library
env.Library(lib_dir + LIBRARYNAME + LIB_POSTFIX, nkt_replay_src + nkt_conv_src + lzo_src + gemdos_src)
