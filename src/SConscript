
#    Copyright 2007-2022 Pawel Goralski
#    This file is part of AMIDILIB.
#    See license.txt for licensing information.

import sys
import os

# adds set FastRam flag on executable postbuild action
def setFastRamFlags(env, toolchainType, target):
    if(toolchainType != 'GCCBROWNELF'): # TODO fix / patch for brownelf
        env.AddPostAction(target, Action('m68k-atari-mint-flags --mfastram --mfastload --mfastalloc $TARGET'))

# returns git revision
def getVersion(env):
    git = env.WhereIs('git')
    if git:
        import subprocess
        p = subprocess.Popen('git rev-list --count master', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        return p.stdout.readline().rstrip()
    else:
        print ("git not found")

# calls external tool (brownout) to convert elf files to tos executables
def convertElfToTos(env, toolchainType, buildTypeName, targetName, outputDirPath, outputExtension):
    if(toolchainType == 'GCCBROWNELF'):
        outputPath = outputDirPath + targetName  + '.' + outputExtension
        print('Converting {}.elf to TOS binary --> {}...'.format(targetName,outputPath))
        symbolGeneration=''

        if(buildTypeName == "debug"):
            symbolGeneration=' -x'
        
        env.AddPostAction(targetName +'.elf', Action('brown.out' ' -i $TARGET -o ' + outputPath + symbolGeneration))

# move scons database to build folder
SConsignFile(os.path.join("../build/", '.sconsign.dblite')) 

# Set number of jobs, depending on number of cores
num_cpu = int(os.environ.get('NUMBER_OF_PROCESSORS', 2))
SetOption('num_jobs', num_cpu)

print("Running with %d job(s)." % GetOption('num_jobs')) 

env = Environment(ENV = os.environ,tools=['default'])

Help("AMIDILIB Copyright 2007-2022 Pawel Goralski\n\
Type: 'Set build variables in SConstruct'\n\
where name of 'targetPlatform' can be: \n\
    'F030' - for Atari Falcon030 / TT build\n\
    'ST' - for Atari ST build \n\
    'CT60' - for Atari Falcon CT60/63\n\
 'host' - computer host name,\n\
 'toolchain' - toolchain type 'GCC' or 'GCCBROWNELF',\n\
 'toolchain_c_prefix' - toolchain compiler name prefix,\n\
 'toolchain_version' - compiler version string (x.x.x, eg. '4.3.4' or '7.3.1'),\n\
 'toolchain_prefix' - toolchain prefix path (root of the toolchain folder),\n\
 'toolchain_use_cross' - use cross compiler, set to 'y' by default\n\
 'build_config' - build type ('debug', 'release'),\n\
 'use_fpu' - enable/disable hardware fpu code generation (valid only on F030 builds),\n\
 'enable_lzo_compression' - enable/disable lzo compression support.\n\
 'enable_lto' - enable link time optimisation. Only valid on gcc 6.x.x> brownelf compilers.\n\
 'ikbd_direct_write' - bypass O/S when writing to MIDI ports\n\
 'tx_enable' - skips writing to ACIA ikbd port, sending bytes is via ikbd tx interrupt,\n\
 'conout_enable' - disable / enable console output,\n\
 'gemdos_io_enable' - uses gemdos i/o instead of standard libc file i/o,\n\
 'use_libc' - if set to 'no', builds library without libc dependencies, reducing binary size,\n\
 'debug_level' - sets debug level, only valid in debug builds. Level can be set to (0..2)\n"\
)

Import(
        'host',\
        'toolchain',\
        'toolchain_c_prefix',\
        'toolchain_version',\
        'toolchain_prefix',\
        'toolchain_use_cross',\
        'targetPlatform',\
        'build_config',\
        'use_fpu',\
        'enable_lzo_compression',\
        'enable_lto',\
        'ikbd_direct_write',\
        'tx_enable',\
        'conout_enable',\
        'gemdos_io_enable',\
        'use_libc',\
        'debug_level'
        )

# helper paths
rootdir = Dir('../').abspath
projdir = Dir('#').abspath
outputdir = Dir('.').abspath

# environment 
LIBRARYNAME = 'amidi'

PREFIX = toolchain_prefix
GCC_PREFIX = toolchain_c_prefix
GCC_VERSION_STRING = toolchain_version

if(toolchain=='GCC'):
    if(use_libc == 'yes'):
        if(PREFIX):
            env['CPPPATH'] = [PREFIX + '/' + 'm68k-atari-mint/include', projdir + '/../deps/nanoprintf']
            env['LIBPATH'] = [PREFIX + '/' + 'm68k-atari-mint/lib']
        else:
            env['CPPPATH'] = ['m68k-atari-mint/include']
            env['LIBPATH'] = ['m68k-atari-mint/lib']
    else:
        env['CPPPATH'] = [projdir + '/../deps/atari-gcc-startup/include', projdir + '/../deps/nanoprintf']
        env['LIBPATH'] = []

elif(toolchain=='GCCBROWNELF'):
    if(use_libc == 'yes'):
        if(PREFIX):
            env['CPPPATH'] = [PREFIX + '/' + GCC_PREFIX + '/include', projdir + '/../deps/nanoprintf'] 
            env['LIBPATH'] = [PREFIX + '/' + GCC_PREFIX + '/lib']
        else:
            env['CPPPATH'] = [GCC_PREFIX + '/include', projdir + '/../deps/nanoprintf']
            env['LIBPATH'] = [GCC_PREFIX + '/lib']
    else:
        env['CPPPATH'] = [projdir + '/../deps/atari-gcc-startup/include', projdir + '/../deps/nanoprintf']
        env['LIBPATH'] = []
else:
    print('ERROR: Undefined target toolset. Exiting...')
    exit(-1)

if(PREFIX):
    env['CC'] = PREFIX + '/bin/' + GCC_PREFIX + '-gcc' + '-' + GCC_VERSION_STRING
    env['CXX'] = PREFIX + '/bin/' + GCC_PREFIX + '-c++'
    env['OBJCOPY'] = PREFIX + '/bin/' + GCC_PREFIX + '-objcopy'
    env['STRIP'] = PREFIX + '/bin/' + GCC_PREFIX + '-strip -s'
    env['STACK'] = PREFIX + '/bin/' + GCC_PREFIX + '-stack'
    env['AR'] = PREFIX + '/bin/' + GCC_PREFIX + '-ar'
    env['RANLIB'] = PREFIX + '/bin/' + GCC_PREFIX + '-ranlib'
else:   
    env['CC'] = GCC_PREFIX + '-gcc'
    env['CXX'] = GCC_PREFIX + '-c++'
    env['OBJCOPY'] = GCC_PREFIX + '-objcopy'
    env['STRIP'] = GCC_PREFIX + '-strip -s'
    env['STACK'] = GCC_PREFIX + '-stack'
    env['AR'] = GCC_PREFIX + '-ar'
    env['RANLIB'] = GCC_PREFIX + '-ranlib'

if(toolchain == 'GCCBROWNELF'):
    env['PROGSUFFIX'] = '.elf'
else:
    env['PROGSUFFIX'] = '.tos'

env['LIBSUFFIX'] ='.a'

# VASM
env['AS']='vasmm68k_mot'
env['VASM'] = env['AS']

# ST/e, F030, CT60 program flags
CFLAGS=''
LDFLAGS=''
VASM_FLAGS=''
CPPFLAGS=''
CXXFLAGS=''
CODEGEN = '-std=c99'

LIB_TARGET='not_set'

STACK_SIZE=0
    
TARGET='-DTARGET_'
OBJ_FORMAT=''

if(use_fpu == 'yes'):
    fpu_flags = '-m68881 '
    VASM_FLAGS += '-m68881 '
else:
    fpu_flags = '-msoft-float '
    VASM_FLAGS += '-no-fpu '

if(toolchain=='GCC'):
    OBJ_FORMAT='aout'
    fpu_flags = ''

    if(targetPlatform == 'ST'):
        CFLAGS += '-m68000 ' + CODEGEN + ' -ffast-math -fomit-frame-pointer ' + fpu_flags
        LDFLAGS += '-m68000 '
        VASM_FLAGS += '-m68000 -quiet -Faout -quiet -spaces -I../include '
        LIB_TARGET = '000'
    elif(targetPlatform == 'F030'):
        CFLAGS += '-m68020-40  ' + CODEGEN + ' -ffast-math -fomit-frame-pointer ' + fpu_flags
        LDFLAGS += '-m68020-40 '
        VASM_FLAGS += '-m68030 -quiet -Faout -quiet -spaces -I../include '
        LIB_TARGET = '030'
    elif(targetPlatform == 'CT60'):
        CFLAGS += '-m68060 ' + CODEGEN + ' -ffast-math -fomit-frame-pointer ' + fpu_flags
        LDFLAGS += '-m68060 '
        VASM_FLAGS += '-m68060 -quiet -Faout -quiet -spaces -I../include '
        LIB_TARGET = '060'
    else:
        print('Unsupported target. Exiting...')
        exit(-1)
elif(toolchain == 'GCCBROWNELF'):
    OBJ_FORMAT='brownelf'

    if(enable_lto == 'yes'):
        CFLAGS += '-flto '
        LDFLAGS += '-flto '

    if(targetPlatform == 'ST'):
        CFLAGS += '-m68000 ' + CODEGEN + ' -fomit-frame-pointer -fleading-underscore -ffunction-sections -fdata-sections ' + fpu_flags
        LDFLAGS += '-m68000 -Wl,--gc-sections -Wl,--emit-relocs -Ttext=0 '
        VASM_FLAGS += '-m68000 -quiet -Felf -quiet -spaces -I../include '

        LIB_TARGET = '000'

        # floating point support
        env['LIBPATH'] = env['LIBPATH'] + ['/lib/gcc/' + GCC_PREFIX + '/' + GCC_VERSION_STRING + '/m68000','/usr/' + GCC_PREFIX + '/lib/m68000']
    elif(targetPlatform == 'F030'):
        CFLAGS += '-m68020-40 ' + CODEGEN + ' -fomit-frame-pointer -fleading-underscore -ffunction-sections -fdata-sections ' + fpu_flags
        LDFLAGS += '-m68020-40 -Wl,--gc-sections -Wl,--emit-relocs -Ttext=0 '
        VASM_FLAGS += '-m68030 -quiet -Felf -quiet -spaces -I../include '

        LIB_TARGET = '030'

        # floating point support
        if(use_fpu == 'yes'):
            # hardware fpu support
            env['LIBPATH']=env['LIBPATH'] + ['/lib/gcc/' + GCC_PREFIX + '/' + GCC_VERSION_STRING + '/m68020', '/usr/' + GCC_PREFIX + '/lib/m68020']
        else:
            # soft float
            env['LIBPATH']=env['LIBPATH'] + ['/lib/gcc/' + GCC_PREFIX + '/' + GCC_VERSION_STRING + '/m68020/softfp', '/usr/' + GCC_PREFIX + '/lib/m68020/softfp']

    elif(targetPlatform == 'CT60'):
        CFLAGS += '-m68060 ' + CODEGEN + ' -fomit-frame-pointer -fleading-underscore -ffunction-sections -fdata-sections ' + fpu_flags
        LDFLAGS += '-m68060 -Wl,--gc-sections -Wl,--emit-relocs -Ttext=0 '
        VASM_FLAGS += '-m68060 -quiet -Felf -quiet -spaces -I../include '

        LIB_TARGET = '060'

        # floating point support
        # hardware fpu support
        env['LIBPATH'] = env['LIBPATH'] + ['/lib/gcc/' + GCC_PREFIX + '/' + GCC_VERSION_STRING + '/m68060', '/usr/' + GCC_PREFIX + '/lib/m68060']

    else:
        print('Unsupported target. Exiting...')
        exit(-1)
else:
    print('ERROR: Undefined target toolset. Exiting...')
    exit(-1)

TARGET = TARGET + targetPlatform

# indicate that we are not linking to standard libc libraries
if(use_libc == 'yes'):
    CFLAGS+='-DAMIDILIB_USE_LIBC=1 '
    LDFLAGS+=' '
else:
    CFLAGS+='-DAMIDILIB_USE_LIBC=0 -I' + projdir + '/../deps/atari-gcc-startup/include '
    LDFLAGS+='-nostdlib -nostartfiles -Wl,-e_start '

# skip writing directly to ikbd port completely
if (tx_enable == "yes"):
    VASM_FLAGS += '-DTX_ENABLE=1 '
else:
    VASM_FLAGS += '-DTX_ENABLE=0 '

if (conout_enable == "no"):
    print ("Silent mode. Console output disabled.")
    CFLAGS += '-DSUPRESS_CON_OUTPUT '

if (gemdos_io_enable == "yes"):
    print ("Use GEMDOS for file I/O not libc functions.")
    CFLAGS += '-DENABLE_GEMDOS_IO '

env["CPPPATH"] += [projdir + '/../include'] + [projdir + '/../include/lzo'] + [projdir + '/../include/ym2149'] + [projdir + '/../include/input']
env["LIBPATH"] += [outputdir + '/']

if(use_libc!='yes'):
    env["LIBPATH"] += [projdir + '/../deps/atari-gcc-startup/lib/' + OBJ_FORMAT + '/' + build_config + '/m68' + LIB_TARGET + '/']

#############################################################################################################################
# additional defines  
#############################################################################################################################
# DEBUG_BUILD - enables debug build
# DEBUG_MEM logs memory function calling (works only if (DEBUG_BUILD && (DEBUG_OUTPUT_TO_*) == true )
# FORCE_MALLOC forces use of libc malloc() for memory allocation, not native functions
# MIDI_PARSER_DEBUG output midi parsing (works only if (DEBUG_BUILD && (DEBUG_OUTPUT_TO_*) == true )
# MIDI_PARSER_TEST outputs loaded and parsed midi file in human readable form
# IKBD_MIDI_SEND_DIRECT all Midiws() calls will be replaced with low level function that writes to hardware.
# USE_INLINE if defined some functions are inlined
# EVENT_LINEAR_BUFFER library uses custom memory pool for midi events instead of using standard memory allocation calls (per sequence file),
# memory pool is configurable (see eventPoolSize / eventDataAllocatorSize)
# LZO_DEBUG enables LZO debug mode

if ( build_config == 'debug'):

  print ("Debug build...")
  
  LDFLAGS += "-Wl,--traditional-format"
  
  if(debug_level=='1'):
    CFLAGS += '-DDEBUG_BUILD -DEVENT_LINEAR_BUFFER ' + '-DUSE_INLINE ' + '-DLOAD_TEST '
  elif(debug_level=='2'):
    CFLAGS += '-DDEBUG_BUILD -DEVENT_LINEAR_BUFFER -DMIDI_PARSER_DEBUG -DMIDI_PARSER_TEST ' + '-DUSE_INLINE ' + '-DLOAD_TEST '
  elif(debug_level=='3'):
    CFLAGS += '-DDEBUG_BUILD -DEVENT_LINEAR_BUFFER '
  else:
    CFLAGS += '-DDEBUG_BUILD -DEVENT_LINEAR_BUFFER ' + '-DUSE_INLINE ' + '-DLOAD_TEST '
  
else:
    print ("Release build... Code optimisation is turned on.")
    LDFLAGS += "-s "
    CFLAGS += '-DEVENT_LINEAR_BUFFER ' +' -O3 ' + ' -DUSE_INLINE ' + '-DNDEBUG '
    
if(ikbd_direct_write == "yes"):
    print ("Sending data directly via IKBD ENABLED")
    CFLAGS += '-DIKBD_MIDI_SEND_DIRECT '
    VASM_FLAGS += '-DIKBD_MIDI_SEND_DIRECT=1 '
elif(ikbd_direct_write=='no'):
    print ("Sending data directly via IKBD DISABLED")
    CFLAGS += ' '
    VASM_FLAGS += '-DIKBD_MIDI_SEND_DIRECT=0 '

env["CFLAGS"] = CFLAGS  
env["LINKFLAGS"] = LDFLAGS 
env["ASFLAGS"] = VASM_FLAGS
env['VASM_FLAGS'] = VASM_FLAGS

# core functionality
core_src = ["common/core/vartypes.c","common/core/amprintf.c","common/core/logger.c","common/core/amidilib.c","common/core/config.c"]
containers_src = ["common/containers/stack.c","common/containers/list.c"]
roland_src = ["common/roland/rol_ptch.c","common/roland/rol_tbl.c"]
nkt_format_src = ["common/formats/seq2nkt.c","common/formats/midi2nkt.c","common/formats/nkt_rep_m68k.s","common/formats/nkt_rep.c"]
midiformats_src = ["common/formats/xmidi.c","common/formats/mus2midi.c"] + nkt_format_src
midiparser_src = ["common/midi/mparser.c"]

m68kasm_common_src = ["tos/common.s"]
input_src =  ["tos/ikbd.s"]
discio_src = ["tos/gemdosio.c"]
timing_src = ["common/timing/miditim.c","tos/common.s"]
midi_src = ["tos/midi_rep.c","common/midi/midiseq.c","common/midi/midi.c","tos/common.s","tos/midiReplay.s"]
memory_src = ["tos/memory.c","common/memory/linalloc.c"]
string_src = ["tos/string/ctype.c","tos/string/ctype2.c","tos/string/string.c","tos/string/memcpy.s","tos/string/memcmp.s","tos/string/memset.s","tos/string/strcmp.s","tos/string/strlen.s","tos/string/strstr.s"]

# other: native keyboard input (Atari only), ym2149 output, random functions, lzo compression
ym2149_src = ["common/ym2149.c"]
lzo_src = ["common/lzo/minilzo.c"]

# main library 
amidilib_src = core_src + containers_src + discio_src + memory_src + timing_src + midi_src + midiparser_src + roland_src + midiformats_src + lzo_src

if(use_libc == 'no'):
    amidilib_src = string_src + amidilib_src

# build library
env.Library(LIBRARYNAME, amidilib_src)

#################### test programs entry points
amidi_test_src = [projdir + "/../demo/midi_rep/midiplay.c"]
midiOut_test_src = [projdir + "/../demo/midi_output/midiout.c"]
timings_test_src = [projdir + "/../demo/timings/timTest.c", projdir + "/../demo/timings/sampleSequence.c", projdir + "/../demo/timings/customSeqReplay.s"]
ym2149_test_src = [projdir + "/../demo/ymOutput/ymTest.c"]
nktReplay_src = [projdir + "/../demo/nktReplay/nktReplay.c"]
mid2nkt_src = [projdir + "/../demo/mid2nkt/mid2nkt.c"]

##################### nkt
nkt_src = ["common/core/vartypes.c","common/core/logger.c","common/roland/rol_ptch.c","common/formats/midi2nkt.c","common/formats/mus2midi.c","common/formats/midiInfo.c","common/formats/nkt_rep_m68k.s","common/formats/nkt_rep.c", "common/core/amprintf.c"]

if (gemdos_io_enable == "yes"):
    nkt_src = nkt_src + discio_src

ADDLIBS=['']

# output executable names
AMIDI_TEST_NAME = 'midiplay' 
YM2149_TEST_NAME ='ym2149' 
MIDI_SEQ_TEST_NAME = 'midiout'
TIMINGS_TEST_NAME = 'midiseq' 
NKT_REPLAY_NAME = 'nktrep' 
MID2NKT_NAME = 'mid2nkt' 

outputdir = rootdir + '/' + build_config + '/'

if(use_libc == 'yes'):
# build test programs and link them with amidilib
    ADDLIBS = ['c']
    
    env.Program(target = (AMIDI_TEST_NAME + '.ttp'), source = [env.Object(input_src) + amidi_test_src] , LIBS = ADDLIBS + [LIBRARYNAME] , PROGSUFFIX = '.ttp')
    convertElfToTos(env, toolchain, build_config, AMIDI_TEST_NAME, outputdir, 'ttp')

    env.Program(target = (MIDI_SEQ_TEST_NAME + env['PROGSUFFIX']), source = [env.Object(input_src) + midiOut_test_src], LIBS = ADDLIBS + [LIBRARYNAME], PROGSUFFIX = env['PROGSUFFIX'])
    convertElfToTos(env, toolchain, build_config, MIDI_SEQ_TEST_NAME, outputdir,'tos')
    
    env.Program(target = (YM2149_TEST_NAME + env['PROGSUFFIX']), source = [env.Object(m68kasm_common_src) + env.Object(input_src) + env.Object(ym2149_src) + ym2149_test_src], LIBS=ADDLIBS + [LIBRARYNAME], PROGSUFFIX = env['PROGSUFFIX'])
    convertElfToTos(env, toolchain, build_config, YM2149_TEST_NAME, outputdir,'tos')

    env.Program(target = (TIMINGS_TEST_NAME + env['PROGSUFFIX']), source = [env.Object(m68kasm_common_src) + env.Object(input_src) + env.Object(ym2149_src) + timings_test_src], LIBS=ADDLIBS + [LIBRARYNAME], PROGSUFFIX = env['PROGSUFFIX'])
    convertElfToTos(env, toolchain, build_config, TIMINGS_TEST_NAME, outputdir, 'tos')
    
    env.Program(target = (NKT_REPLAY_NAME + '.ttp'), source = [env.Object(nkt_src) + env.Object(input_src) + env.Object(timing_src) + env.Object(memory_src) + env.Object(lzo_src) + nktReplay_src] , LIBS=ADDLIBS + [''], PROGSUFFIX = '.ttp');
    convertElfToTos(env, toolchain, build_config, NKT_REPLAY_NAME, outputdir, 'ttp')

    env.Program(target = (MID2NKT_NAME + '.ttp'), source = [env.Object(nkt_src) + env.Object(timing_src) + env.Object(memory_src) + env.Object(lzo_src) + mid2nkt_src ] , LIBS=ADDLIBS + [''], PROGSUFFIX = '.ttp');
    convertElfToTos(env, toolchain, build_config, MID2NKT_NAME, outputdir, 'ttp')
else:
    ADDLIBS += ['startup' + LIB_TARGET]
    linkedLibs = [LIBRARYNAME] + ADDLIBS
    
    # build test programs and link them with amidilib and custom startup code
    env.Program(target = (AMIDI_TEST_NAME + '.ttp'), source = [env.Object(input_src) + env.Object(string_src) + amidi_test_src ] , LIBS = linkedLibs, PROGSUFFIX = '.ttp')
    convertElfToTos(env, toolchain, build_config, AMIDI_TEST_NAME, outputdir, 'ttp')
    
    env.Program(target = (MIDI_SEQ_TEST_NAME + env['PROGSUFFIX']),source = [env.Object(input_src) + env.Object(string_src) + midiOut_test_src ], LIBS = linkedLibs, PROGSUFFIX = env['PROGSUFFIX'])
    convertElfToTos(env, toolchain, build_config, MIDI_SEQ_TEST_NAME, outputdir,'tos')

    env.Program(target = (YM2149_TEST_NAME + env['PROGSUFFIX']), source = [env.Object(m68kasm_common_src) + env.Object(input_src) + env.Object(ym2149_src) + env.Object(string_src) + ym2149_test_src],  LIBS = linkedLibs , PROGSUFFIX = env['PROGSUFFIX'])
    convertElfToTos(env, toolchain, build_config, YM2149_TEST_NAME, outputdir,'tos')
    
    env.Program(target = (TIMINGS_TEST_NAME + env['PROGSUFFIX']),source = [env.Object(m68kasm_common_src)+ env.Object(input_src) + env.Object(ym2149_src) + env.Object(string_src) + timings_test_src], LIBS = linkedLibs , PROGSUFFIX = env['PROGSUFFIX'])
    convertElfToTos(env, toolchain, build_config, TIMINGS_TEST_NAME, outputdir, 'tos')

    env.Program(target = (NKT_REPLAY_NAME + '.ttp'), source = [env.Object(nkt_src) + env.Object(input_src) + env.Object(timing_src) + env.Object(memory_src) + env.Object(lzo_src) + env.Object(string_src) + nktReplay_src] , LIBS = ADDLIBS + [], PROGSUFFIX='.ttp');
    convertElfToTos(env, toolchain, build_config, NKT_REPLAY_NAME, outputdir, 'ttp')
    
    env.Program(target = (MID2NKT_NAME + '.ttp'), source = [env.Object(nkt_src)  + env.Object(timing_src)+ env.Object(memory_src) + env.Object(lzo_src) + env.Object(string_src) + mid2nkt_src] , LIBS= ADDLIBS + [], PROGSUFFIX = '.ttp'); 
    convertElfToTos(env, toolchain, build_config, MID2NKT_NAME, outputdir, 'ttp')
